#![feature(prelude_import)]
//! # math
//!
//! Example for parsing simple math expressions with integers, + = * / and ()
//! it doesn't include unary operators, and doesn't allow implicit multiplication
//! like (1-2)(3+4) or 2(3+4)
//!
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use teleparse::prelude::*;
#[repr(usize)]
pub enum TokenType {
    Integer = 0usize,
    Operator = 1usize,
    Param = 2usize,
}
#[automatically_derived]
impl ::core::fmt::Debug for TokenType {
    #[inline]
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        ::core::fmt::Formatter::write_str(
            f,
            match self {
                TokenType::Integer => "Integer",
                TokenType::Operator => "Operator",
                TokenType::Param => "Param",
            },
        )
    }
}
#[automatically_derived]
impl ::core::clone::Clone for TokenType {
    #[inline]
    fn clone(&self) -> TokenType {
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for TokenType {}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for TokenType {}
#[automatically_derived]
impl ::core::cmp::PartialEq for TokenType {
    #[inline]
    fn eq(&self, other: &TokenType) -> bool {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        let __arg1_tag = ::core::intrinsics::discriminant_value(other);
        __self_tag == __arg1_tag
    }
}
#[automatically_derived]
impl ::core::cmp::Eq for TokenType {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {}
}
#[automatically_derived]
impl ::core::hash::Hash for TokenType {
    #[inline]
    fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
        let __self_tag = ::core::intrinsics::discriminant_value(self);
        ::core::hash::Hash::hash(&__self_tag, state)
    }
}
/// Terminal symbol derived from [`TokenType`] with `terminal(Integer)`
pub struct Integer(pub teleparse::Token<TokenType>);
#[automatically_derived]
impl ::core::clone::Clone for Integer {
    #[inline]
    fn clone(&self) -> Integer {
        let _: ::core::clone::AssertParamIsClone<teleparse::Token<TokenType>>;
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for Integer {}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for Integer {}
#[automatically_derived]
impl ::core::cmp::PartialEq for Integer {
    #[inline]
    fn eq(&self, other: &Integer) -> bool {
        self.0 == other.0
    }
}
#[automatically_derived]
impl ::core::cmp::Eq for Integer {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _: ::core::cmp::AssertParamIsEq<teleparse::Token<TokenType>>;
    }
}
#[automatically_derived]
impl ::core::hash::Hash for Integer {
    #[inline]
    fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
        ::core::hash::Hash::hash(&self.0, state)
    }
}
#[automatically_derived]
impl teleparse::ToSpan for Integer {
    fn span(&self) -> teleparse::Span {
        self.0.span()
    }
}
const _: () = {
    #[automatically_derived]
    impl ::core::convert::From<teleparse::Token<TokenType>> for Integer {
        fn from(token: teleparse::Token<TokenType>) -> Self {
            Self(token)
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Integer {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            self.0.fmt(f)
        }
    }
    #[automatically_derived]
    impl teleparse::AbstractSyntaxTree for Integer {
        type L = TokenType;
        fn debug() -> ::std::borrow::Cow<'static, str> {
            ::std::borrow::Cow::Borrowed("Integer")
        }
        fn build_first(builder: &mut teleparse::syntax::FirstBuilder<Self::L>) {
            let t = Self::type_id();
            if builder.visit(t, "Integer") {
                let expr = teleparse::syntax::FirstRel::insert_token(
                    t,
                    TokenType::Integer,
                    None,
                );
                builder.add(expr);
            }
        }
        fn check_left_recursive(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _stack: &mut ::std::vec::Vec<::std::string::String>,
            _set: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn check_first_conflict(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn build_follow(_builder: &mut teleparse::syntax::FollowBuilder<Self::L>) {}
        fn check_first_follow_conflict(
            _seen: &mut std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
            _follow: &teleparse::syntax::Follow<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn build_jump(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
            _jump: &mut teleparse::syntax::Jump<Self::L>,
        ) {}
        #[inline]
        fn parse_ast<'s>(
            parser: &mut teleparse::Parser<'s, Self::L>,
            meta: &teleparse::syntax::Metadata<Self::L>,
        ) -> teleparse::syntax::Result<Self, Self::L> {
            parser.parse_token(TokenType::Integer).map(Self::from)
        }
    }
    #[automatically_derived]
    impl teleparse::ParseTree for Integer {
        type AST = Self;
        fn from_ast<'s>(ast: Self, _: &mut teleparse::Parser<'s, TokenType>) -> Self {
            ast
        }
    }
};
/// Terminal symbol derived from [`TokenType`] with `terminal(Zero = "0")`
pub struct Zero(pub teleparse::Token<TokenType>);
#[automatically_derived]
impl ::core::clone::Clone for Zero {
    #[inline]
    fn clone(&self) -> Zero {
        let _: ::core::clone::AssertParamIsClone<teleparse::Token<TokenType>>;
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for Zero {}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for Zero {}
#[automatically_derived]
impl ::core::cmp::PartialEq for Zero {
    #[inline]
    fn eq(&self, other: &Zero) -> bool {
        self.0 == other.0
    }
}
#[automatically_derived]
impl ::core::cmp::Eq for Zero {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _: ::core::cmp::AssertParamIsEq<teleparse::Token<TokenType>>;
    }
}
#[automatically_derived]
impl ::core::hash::Hash for Zero {
    #[inline]
    fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
        ::core::hash::Hash::hash(&self.0, state)
    }
}
#[automatically_derived]
impl teleparse::ToSpan for Zero {
    fn span(&self) -> teleparse::Span {
        self.0.span()
    }
}
const _: () = {
    #[automatically_derived]
    impl ::core::convert::From<teleparse::Token<TokenType>> for Zero {
        fn from(token: teleparse::Token<TokenType>) -> Self {
            Self(token)
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for Zero {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            self.0.fmt(f)
        }
    }
    #[automatically_derived]
    impl teleparse::AbstractSyntaxTree for Zero {
        type L = TokenType;
        fn debug() -> ::std::borrow::Cow<'static, str> {
            ::std::borrow::Cow::Borrowed("Zero")
        }
        fn build_first(builder: &mut teleparse::syntax::FirstBuilder<Self::L>) {
            let t = Self::type_id();
            if builder.visit(t, "Zero") {
                let expr = teleparse::syntax::FirstRel::insert_token(
                    t,
                    TokenType::Integer,
                    Some("0"),
                );
                builder.add(expr);
            }
        }
        fn check_left_recursive(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _stack: &mut ::std::vec::Vec<::std::string::String>,
            _set: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn check_first_conflict(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn build_follow(_builder: &mut teleparse::syntax::FollowBuilder<Self::L>) {}
        fn check_first_follow_conflict(
            _seen: &mut std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
            _follow: &teleparse::syntax::Follow<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn build_jump(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
            _jump: &mut teleparse::syntax::Jump<Self::L>,
        ) {}
        #[inline]
        fn parse_ast<'s>(
            parser: &mut teleparse::Parser<'s, Self::L>,
            meta: &teleparse::syntax::Metadata<Self::L>,
        ) -> teleparse::syntax::Result<Self, Self::L> {
            let follow = meta.follow.get(&Self::type_id());
            parser.parse_token_lit(TokenType::Integer, "0", follow).map(Self::from)
        }
    }
    #[automatically_derived]
    impl teleparse::ParseTree for Zero {
        type AST = Self;
        fn from_ast<'s>(ast: Self, _: &mut teleparse::Parser<'s, TokenType>) -> Self {
            ast
        }
    }
};
/// Terminal symbol derived from [`TokenType`] with `terminal(OpAdd = "+")`
pub struct OpAdd(pub teleparse::Token<TokenType>);
#[automatically_derived]
impl ::core::clone::Clone for OpAdd {
    #[inline]
    fn clone(&self) -> OpAdd {
        let _: ::core::clone::AssertParamIsClone<teleparse::Token<TokenType>>;
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for OpAdd {}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for OpAdd {}
#[automatically_derived]
impl ::core::cmp::PartialEq for OpAdd {
    #[inline]
    fn eq(&self, other: &OpAdd) -> bool {
        self.0 == other.0
    }
}
#[automatically_derived]
impl ::core::cmp::Eq for OpAdd {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _: ::core::cmp::AssertParamIsEq<teleparse::Token<TokenType>>;
    }
}
#[automatically_derived]
impl ::core::hash::Hash for OpAdd {
    #[inline]
    fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
        ::core::hash::Hash::hash(&self.0, state)
    }
}
#[automatically_derived]
impl teleparse::ToSpan for OpAdd {
    fn span(&self) -> teleparse::Span {
        self.0.span()
    }
}
const _: () = {
    #[automatically_derived]
    impl ::core::convert::From<teleparse::Token<TokenType>> for OpAdd {
        fn from(token: teleparse::Token<TokenType>) -> Self {
            Self(token)
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for OpAdd {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            self.0.fmt(f)
        }
    }
    #[automatically_derived]
    impl teleparse::AbstractSyntaxTree for OpAdd {
        type L = TokenType;
        fn debug() -> ::std::borrow::Cow<'static, str> {
            ::std::borrow::Cow::Borrowed("OpAdd")
        }
        fn build_first(builder: &mut teleparse::syntax::FirstBuilder<Self::L>) {
            let t = Self::type_id();
            if builder.visit(t, "OpAdd") {
                let expr = teleparse::syntax::FirstRel::insert_token(
                    t,
                    TokenType::Operator,
                    Some("+"),
                );
                builder.add(expr);
            }
        }
        fn check_left_recursive(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _stack: &mut ::std::vec::Vec<::std::string::String>,
            _set: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn check_first_conflict(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn build_follow(_builder: &mut teleparse::syntax::FollowBuilder<Self::L>) {}
        fn check_first_follow_conflict(
            _seen: &mut std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
            _follow: &teleparse::syntax::Follow<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn build_jump(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
            _jump: &mut teleparse::syntax::Jump<Self::L>,
        ) {}
        #[inline]
        fn parse_ast<'s>(
            parser: &mut teleparse::Parser<'s, Self::L>,
            meta: &teleparse::syntax::Metadata<Self::L>,
        ) -> teleparse::syntax::Result<Self, Self::L> {
            let follow = meta.follow.get(&Self::type_id());
            parser.parse_token_lit(TokenType::Operator, "+", follow).map(Self::from)
        }
    }
    #[automatically_derived]
    impl teleparse::ParseTree for OpAdd {
        type AST = Self;
        fn from_ast<'s>(ast: Self, _: &mut teleparse::Parser<'s, TokenType>) -> Self {
            ast
        }
    }
};
/// Terminal symbol derived from [`TokenType`] with `terminal(OpSub = "-")`
pub struct OpSub(pub teleparse::Token<TokenType>);
#[automatically_derived]
impl ::core::clone::Clone for OpSub {
    #[inline]
    fn clone(&self) -> OpSub {
        let _: ::core::clone::AssertParamIsClone<teleparse::Token<TokenType>>;
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for OpSub {}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for OpSub {}
#[automatically_derived]
impl ::core::cmp::PartialEq for OpSub {
    #[inline]
    fn eq(&self, other: &OpSub) -> bool {
        self.0 == other.0
    }
}
#[automatically_derived]
impl ::core::cmp::Eq for OpSub {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _: ::core::cmp::AssertParamIsEq<teleparse::Token<TokenType>>;
    }
}
#[automatically_derived]
impl ::core::hash::Hash for OpSub {
    #[inline]
    fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
        ::core::hash::Hash::hash(&self.0, state)
    }
}
#[automatically_derived]
impl teleparse::ToSpan for OpSub {
    fn span(&self) -> teleparse::Span {
        self.0.span()
    }
}
const _: () = {
    #[automatically_derived]
    impl ::core::convert::From<teleparse::Token<TokenType>> for OpSub {
        fn from(token: teleparse::Token<TokenType>) -> Self {
            Self(token)
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for OpSub {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            self.0.fmt(f)
        }
    }
    #[automatically_derived]
    impl teleparse::AbstractSyntaxTree for OpSub {
        type L = TokenType;
        fn debug() -> ::std::borrow::Cow<'static, str> {
            ::std::borrow::Cow::Borrowed("OpSub")
        }
        fn build_first(builder: &mut teleparse::syntax::FirstBuilder<Self::L>) {
            let t = Self::type_id();
            if builder.visit(t, "OpSub") {
                let expr = teleparse::syntax::FirstRel::insert_token(
                    t,
                    TokenType::Operator,
                    Some("-"),
                );
                builder.add(expr);
            }
        }
        fn check_left_recursive(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _stack: &mut ::std::vec::Vec<::std::string::String>,
            _set: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn check_first_conflict(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn build_follow(_builder: &mut teleparse::syntax::FollowBuilder<Self::L>) {}
        fn check_first_follow_conflict(
            _seen: &mut std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
            _follow: &teleparse::syntax::Follow<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn build_jump(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
            _jump: &mut teleparse::syntax::Jump<Self::L>,
        ) {}
        #[inline]
        fn parse_ast<'s>(
            parser: &mut teleparse::Parser<'s, Self::L>,
            meta: &teleparse::syntax::Metadata<Self::L>,
        ) -> teleparse::syntax::Result<Self, Self::L> {
            let follow = meta.follow.get(&Self::type_id());
            parser.parse_token_lit(TokenType::Operator, "-", follow).map(Self::from)
        }
    }
    #[automatically_derived]
    impl teleparse::ParseTree for OpSub {
        type AST = Self;
        fn from_ast<'s>(ast: Self, _: &mut teleparse::Parser<'s, TokenType>) -> Self {
            ast
        }
    }
};
/// Terminal symbol derived from [`TokenType`] with `terminal(OpMul = "*")`
pub struct OpMul(pub teleparse::Token<TokenType>);
#[automatically_derived]
impl ::core::clone::Clone for OpMul {
    #[inline]
    fn clone(&self) -> OpMul {
        let _: ::core::clone::AssertParamIsClone<teleparse::Token<TokenType>>;
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for OpMul {}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for OpMul {}
#[automatically_derived]
impl ::core::cmp::PartialEq for OpMul {
    #[inline]
    fn eq(&self, other: &OpMul) -> bool {
        self.0 == other.0
    }
}
#[automatically_derived]
impl ::core::cmp::Eq for OpMul {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _: ::core::cmp::AssertParamIsEq<teleparse::Token<TokenType>>;
    }
}
#[automatically_derived]
impl ::core::hash::Hash for OpMul {
    #[inline]
    fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
        ::core::hash::Hash::hash(&self.0, state)
    }
}
#[automatically_derived]
impl teleparse::ToSpan for OpMul {
    fn span(&self) -> teleparse::Span {
        self.0.span()
    }
}
const _: () = {
    #[automatically_derived]
    impl ::core::convert::From<teleparse::Token<TokenType>> for OpMul {
        fn from(token: teleparse::Token<TokenType>) -> Self {
            Self(token)
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for OpMul {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            self.0.fmt(f)
        }
    }
    #[automatically_derived]
    impl teleparse::AbstractSyntaxTree for OpMul {
        type L = TokenType;
        fn debug() -> ::std::borrow::Cow<'static, str> {
            ::std::borrow::Cow::Borrowed("OpMul")
        }
        fn build_first(builder: &mut teleparse::syntax::FirstBuilder<Self::L>) {
            let t = Self::type_id();
            if builder.visit(t, "OpMul") {
                let expr = teleparse::syntax::FirstRel::insert_token(
                    t,
                    TokenType::Operator,
                    Some("*"),
                );
                builder.add(expr);
            }
        }
        fn check_left_recursive(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _stack: &mut ::std::vec::Vec<::std::string::String>,
            _set: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn check_first_conflict(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn build_follow(_builder: &mut teleparse::syntax::FollowBuilder<Self::L>) {}
        fn check_first_follow_conflict(
            _seen: &mut std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
            _follow: &teleparse::syntax::Follow<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn build_jump(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
            _jump: &mut teleparse::syntax::Jump<Self::L>,
        ) {}
        #[inline]
        fn parse_ast<'s>(
            parser: &mut teleparse::Parser<'s, Self::L>,
            meta: &teleparse::syntax::Metadata<Self::L>,
        ) -> teleparse::syntax::Result<Self, Self::L> {
            let follow = meta.follow.get(&Self::type_id());
            parser.parse_token_lit(TokenType::Operator, "*", follow).map(Self::from)
        }
    }
    #[automatically_derived]
    impl teleparse::ParseTree for OpMul {
        type AST = Self;
        fn from_ast<'s>(ast: Self, _: &mut teleparse::Parser<'s, TokenType>) -> Self {
            ast
        }
    }
};
/// Terminal symbol derived from [`TokenType`] with `terminal(OpDiv = "/")`
pub struct OpDiv(pub teleparse::Token<TokenType>);
#[automatically_derived]
impl ::core::clone::Clone for OpDiv {
    #[inline]
    fn clone(&self) -> OpDiv {
        let _: ::core::clone::AssertParamIsClone<teleparse::Token<TokenType>>;
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for OpDiv {}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for OpDiv {}
#[automatically_derived]
impl ::core::cmp::PartialEq for OpDiv {
    #[inline]
    fn eq(&self, other: &OpDiv) -> bool {
        self.0 == other.0
    }
}
#[automatically_derived]
impl ::core::cmp::Eq for OpDiv {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _: ::core::cmp::AssertParamIsEq<teleparse::Token<TokenType>>;
    }
}
#[automatically_derived]
impl ::core::hash::Hash for OpDiv {
    #[inline]
    fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
        ::core::hash::Hash::hash(&self.0, state)
    }
}
#[automatically_derived]
impl teleparse::ToSpan for OpDiv {
    fn span(&self) -> teleparse::Span {
        self.0.span()
    }
}
const _: () = {
    #[automatically_derived]
    impl ::core::convert::From<teleparse::Token<TokenType>> for OpDiv {
        fn from(token: teleparse::Token<TokenType>) -> Self {
            Self(token)
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for OpDiv {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            self.0.fmt(f)
        }
    }
    #[automatically_derived]
    impl teleparse::AbstractSyntaxTree for OpDiv {
        type L = TokenType;
        fn debug() -> ::std::borrow::Cow<'static, str> {
            ::std::borrow::Cow::Borrowed("OpDiv")
        }
        fn build_first(builder: &mut teleparse::syntax::FirstBuilder<Self::L>) {
            let t = Self::type_id();
            if builder.visit(t, "OpDiv") {
                let expr = teleparse::syntax::FirstRel::insert_token(
                    t,
                    TokenType::Operator,
                    Some("/"),
                );
                builder.add(expr);
            }
        }
        fn check_left_recursive(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _stack: &mut ::std::vec::Vec<::std::string::String>,
            _set: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn check_first_conflict(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn build_follow(_builder: &mut teleparse::syntax::FollowBuilder<Self::L>) {}
        fn check_first_follow_conflict(
            _seen: &mut std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
            _follow: &teleparse::syntax::Follow<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn build_jump(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
            _jump: &mut teleparse::syntax::Jump<Self::L>,
        ) {}
        #[inline]
        fn parse_ast<'s>(
            parser: &mut teleparse::Parser<'s, Self::L>,
            meta: &teleparse::syntax::Metadata<Self::L>,
        ) -> teleparse::syntax::Result<Self, Self::L> {
            let follow = meta.follow.get(&Self::type_id());
            parser.parse_token_lit(TokenType::Operator, "/", follow).map(Self::from)
        }
    }
    #[automatically_derived]
    impl teleparse::ParseTree for OpDiv {
        type AST = Self;
        fn from_ast<'s>(ast: Self, _: &mut teleparse::Parser<'s, TokenType>) -> Self {
            ast
        }
    }
};
/// Terminal symbol derived from [`TokenType`] with `terminal(ParamOpen = "(")`
pub struct ParamOpen(pub teleparse::Token<TokenType>);
#[automatically_derived]
impl ::core::clone::Clone for ParamOpen {
    #[inline]
    fn clone(&self) -> ParamOpen {
        let _: ::core::clone::AssertParamIsClone<teleparse::Token<TokenType>>;
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for ParamOpen {}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for ParamOpen {}
#[automatically_derived]
impl ::core::cmp::PartialEq for ParamOpen {
    #[inline]
    fn eq(&self, other: &ParamOpen) -> bool {
        self.0 == other.0
    }
}
#[automatically_derived]
impl ::core::cmp::Eq for ParamOpen {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _: ::core::cmp::AssertParamIsEq<teleparse::Token<TokenType>>;
    }
}
#[automatically_derived]
impl ::core::hash::Hash for ParamOpen {
    #[inline]
    fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
        ::core::hash::Hash::hash(&self.0, state)
    }
}
#[automatically_derived]
impl teleparse::ToSpan for ParamOpen {
    fn span(&self) -> teleparse::Span {
        self.0.span()
    }
}
const _: () = {
    #[automatically_derived]
    impl ::core::convert::From<teleparse::Token<TokenType>> for ParamOpen {
        fn from(token: teleparse::Token<TokenType>) -> Self {
            Self(token)
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for ParamOpen {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            self.0.fmt(f)
        }
    }
    #[automatically_derived]
    impl teleparse::AbstractSyntaxTree for ParamOpen {
        type L = TokenType;
        fn debug() -> ::std::borrow::Cow<'static, str> {
            ::std::borrow::Cow::Borrowed("ParamOpen")
        }
        fn build_first(builder: &mut teleparse::syntax::FirstBuilder<Self::L>) {
            let t = Self::type_id();
            if builder.visit(t, "ParamOpen") {
                let expr = teleparse::syntax::FirstRel::insert_token(
                    t,
                    TokenType::Param,
                    Some("("),
                );
                builder.add(expr);
            }
        }
        fn check_left_recursive(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _stack: &mut ::std::vec::Vec<::std::string::String>,
            _set: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn check_first_conflict(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn build_follow(_builder: &mut teleparse::syntax::FollowBuilder<Self::L>) {}
        fn check_first_follow_conflict(
            _seen: &mut std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
            _follow: &teleparse::syntax::Follow<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn build_jump(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
            _jump: &mut teleparse::syntax::Jump<Self::L>,
        ) {}
        #[inline]
        fn parse_ast<'s>(
            parser: &mut teleparse::Parser<'s, Self::L>,
            meta: &teleparse::syntax::Metadata<Self::L>,
        ) -> teleparse::syntax::Result<Self, Self::L> {
            let follow = meta.follow.get(&Self::type_id());
            parser.parse_token_lit(TokenType::Param, "(", follow).map(Self::from)
        }
    }
    #[automatically_derived]
    impl teleparse::ParseTree for ParamOpen {
        type AST = Self;
        fn from_ast<'s>(ast: Self, _: &mut teleparse::Parser<'s, TokenType>) -> Self {
            ast
        }
    }
};
/// Terminal symbol derived from [`TokenType`] with `terminal(ParamClose = ")")`
pub struct ParamClose(pub teleparse::Token<TokenType>);
#[automatically_derived]
impl ::core::clone::Clone for ParamClose {
    #[inline]
    fn clone(&self) -> ParamClose {
        let _: ::core::clone::AssertParamIsClone<teleparse::Token<TokenType>>;
        *self
    }
}
#[automatically_derived]
impl ::core::marker::Copy for ParamClose {}
#[automatically_derived]
impl ::core::marker::StructuralPartialEq for ParamClose {}
#[automatically_derived]
impl ::core::cmp::PartialEq for ParamClose {
    #[inline]
    fn eq(&self, other: &ParamClose) -> bool {
        self.0 == other.0
    }
}
#[automatically_derived]
impl ::core::cmp::Eq for ParamClose {
    #[inline]
    #[doc(hidden)]
    #[coverage(off)]
    fn assert_receiver_is_total_eq(&self) -> () {
        let _: ::core::cmp::AssertParamIsEq<teleparse::Token<TokenType>>;
    }
}
#[automatically_derived]
impl ::core::hash::Hash for ParamClose {
    #[inline]
    fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {
        ::core::hash::Hash::hash(&self.0, state)
    }
}
#[automatically_derived]
impl teleparse::ToSpan for ParamClose {
    fn span(&self) -> teleparse::Span {
        self.0.span()
    }
}
const _: () = {
    #[automatically_derived]
    impl ::core::convert::From<teleparse::Token<TokenType>> for ParamClose {
        fn from(token: teleparse::Token<TokenType>) -> Self {
            Self(token)
        }
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for ParamClose {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            self.0.fmt(f)
        }
    }
    #[automatically_derived]
    impl teleparse::AbstractSyntaxTree for ParamClose {
        type L = TokenType;
        fn debug() -> ::std::borrow::Cow<'static, str> {
            ::std::borrow::Cow::Borrowed("ParamClose")
        }
        fn build_first(builder: &mut teleparse::syntax::FirstBuilder<Self::L>) {
            let t = Self::type_id();
            if builder.visit(t, "ParamClose") {
                let expr = teleparse::syntax::FirstRel::insert_token(
                    t,
                    TokenType::Param,
                    Some(")"),
                );
                builder.add(expr);
            }
        }
        fn check_left_recursive(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _stack: &mut ::std::vec::Vec<::std::string::String>,
            _set: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn check_first_conflict(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn build_follow(_builder: &mut teleparse::syntax::FollowBuilder<Self::L>) {}
        fn check_first_follow_conflict(
            _seen: &mut std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
            _follow: &teleparse::syntax::Follow<Self::L>,
        ) -> ::core::result::Result<(), teleparse::GrammarError> {
            Ok(())
        }
        fn build_jump(
            _seen: &mut ::std::collections::BTreeSet<::core::any::TypeId>,
            _first: &teleparse::syntax::First<Self::L>,
            _jump: &mut teleparse::syntax::Jump<Self::L>,
        ) {}
        #[inline]
        fn parse_ast<'s>(
            parser: &mut teleparse::Parser<'s, Self::L>,
            meta: &teleparse::syntax::Metadata<Self::L>,
        ) -> teleparse::syntax::Result<Self, Self::L> {
            let follow = meta.follow.get(&Self::type_id());
            parser.parse_token_lit(TokenType::Param, ")", follow).map(Self::from)
        }
    }
    #[automatically_derived]
    impl teleparse::ParseTree for ParamClose {
        type AST = Self;
        fn from_ast<'s>(ast: Self, _: &mut teleparse::Parser<'s, TokenType>) -> Self {
            ast
        }
    }
};
const _: () = {
    enum DerivedLogos {
        #[regex(r#"\d+"#)]
        Integer,
    }
    impl<'s> ::logos::Logos<'s> for DerivedLogos {
        type Error = ();
        type Extras = ();
        type Source = str;
        fn lex(lex: &mut ::logos::Lexer<'s, Self>) {
            use ::logos::internal::{LexerInternal, CallbackResult};
            type Lexer<'s> = ::logos::Lexer<'s, DerivedLogos>;
            fn _end<'s>(lex: &mut Lexer<'s>) {
                lex.end()
            }
            fn _error<'s>(lex: &mut Lexer<'s>) {
                lex.bump_unchecked(1);
                lex.error();
            }
            #[inline]
            fn goto1_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(DerivedLogos::Integer));
            }
            #[inline]
            fn goto1_x<'s>(lex: &mut Lexer<'s>) {
                lex.set(Ok(DerivedLogos::Integer));
            }
            #[inline]
            fn goto5_at1_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(2usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto4_at1_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(2usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto71_at1_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(1usize) {
                    Some([188u8, 144u8..=153u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto5_at2_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto28_at2_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto4_at2_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto3_at2_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => goto1_x(lex),
                }
            }
            #[inline]
            fn pattern0(byte: u8) -> bool {
                match byte {
                    144u8..=153u8 | 176u8..=185u8 => true,
                    _ => false,
                }
            }
            #[inline]
            fn goto66_at2_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1_x(lex),
                };
                match byte {
                    byte if pattern0(byte) => {
                        lex.bump_unchecked(3usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto70_at1_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J5,
                    J28,
                    J4,
                    J3,
                    J66,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J28,
                        J5,
                        __,
                        __,
                        J66,
                        __,
                        J28,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto1_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J5 => goto5_at2_ctx1_x(lex),
                    Jump::J28 => goto28_at2_ctx1_x(lex),
                    Jump::J4 => goto4_at2_ctx1_x(lex),
                    Jump::J3 => goto3_at2_ctx1_x(lex),
                    Jump::J66 => goto66_at2_ctx1_x(lex),
                    Jump::__ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto9_at2_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto32_at1_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J9,
                    J28,
                    J3,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J9,
                        __,
                        J9,
                        __,
                        J9,
                        __,
                        J9,
                        __,
                        J9,
                        __,
                        J9,
                        __,
                        J9,
                        __,
                        J9,
                        __,
                        J9,
                        __,
                        J9,
                        __,
                        J28,
                        __,
                        J28,
                        J3,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto1_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J9 => goto9_at2_ctx1_x(lex),
                    Jump::J28 => goto28_at2_ctx1_x(lex),
                    Jump::J3 => goto3_at2_ctx1_x(lex),
                    Jump::__ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto3_at1_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(2usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => goto1_x(lex),
                }
            }
            #[inline]
            fn pattern1(byte: u8) -> bool {
                match byte {
                    128u8..=137u8 | 144u8..=153u8 => true,
                    _ => false,
                }
            }
            #[inline]
            fn goto49_at2_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1_x(lex),
                };
                match byte {
                    byte if pattern1(byte) => {
                        lex.bump_unchecked(3usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto42_at2_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([134u8..=143u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto57_at1_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J5,
                    J28,
                    J4,
                    J49,
                    J3,
                    J42,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J5,
                        J28,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3,
                        J28,
                        __,
                        __,
                        __,
                        __,
                        J42,
                        __,
                        J28,
                        __,
                        __,
                        J49,
                        __,
                        __,
                        J28,
                        J4,
                        __,
                        __,
                        J49,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto1_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J5 => goto5_at2_ctx1_x(lex),
                    Jump::J28 => goto28_at2_ctx1_x(lex),
                    Jump::J4 => goto4_at2_ctx1_x(lex),
                    Jump::J49 => goto49_at2_ctx1_x(lex),
                    Jump::J3 => goto3_at2_ctx1_x(lex),
                    Jump::J42 => goto42_at2_ctx1_x(lex),
                    Jump::__ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto4_at3_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto3_at3_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto77_at2_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1_x(lex),
                };
                match byte {
                    180u8 => goto4_at3_ctx1_x(lex),
                    146u8 => goto3_at3_ctx1_x(lex),
                    _ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto5_at3_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto28_at3_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto9_at3_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto89_at3_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([182u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto140_at2_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J5,
                    J4,
                    J28,
                    J9,
                    J89,
                    J3,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J9,
                        __,
                        J4,
                        J89,
                        __,
                        __,
                        J28,
                        __,
                        __,
                        __,
                        J4,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J28,
                        __,
                        J28,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J28,
                        __,
                        J5,
                        J4,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3,
                        __,
                        J28,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J28,
                        __,
                        __,
                        __,
                        J28,
                        J3,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J28,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J5 => goto5_at3_ctx1_x(lex),
                    Jump::J4 => goto4_at3_ctx1_x(lex),
                    Jump::J28 => goto28_at3_ctx1_x(lex),
                    Jump::J9 => goto9_at3_ctx1_x(lex),
                    Jump::J89 => goto89_at3_ctx1_x(lex),
                    Jump::J3 => goto3_at3_ctx1_x(lex),
                    Jump::__ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto69_at2_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([175u8, 176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto150_at2_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J5,
                    J28,
                    J3,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3,
                        __,
                        J5,
                        __,
                        J28,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J5 => goto5_at3_ctx1_x(lex),
                    Jump::J28 => goto28_at3_ctx1_x(lex),
                    Jump::J3 => goto3_at3_ctx1_x(lex),
                    Jump::__ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto153_at2_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([159u8, 142u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto166_at2_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J5,
                    J4,
                    J28,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J5,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J28,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return goto1_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J5 => goto5_at3_ctx1_x(lex),
                    Jump::J4 => goto4_at3_ctx1_x(lex),
                    Jump::J28 => goto28_at3_ctx1_x(lex),
                    Jump::__ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto168_at1_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J77,
                    J140,
                    J69,
                    J150,
                    J153,
                    J166,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J77,
                        J140,
                        __,
                        __,
                        __,
                        __,
                        J150,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J153,
                        J166,
                        J69,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return goto1_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J77 => goto77_at2_ctx1_x(lex),
                    Jump::J140 => goto140_at2_ctx1_x(lex),
                    Jump::J69 => goto69_at2_ctx1_x(lex),
                    Jump::J150 => goto150_at2_ctx1_x(lex),
                    Jump::J153 => goto153_at2_ctx1_x(lex),
                    Jump::J166 => goto166_at2_ctx1_x(lex),
                    Jump::__ => goto1_x(lex),
                }
            }
            #[inline]
            fn goto2_ctx1_x<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J5,
                    J4,
                    J71,
                    J70,
                    J32,
                    J3,
                    J2,
                    J57,
                    J168,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2,
                        J2,
                        J2,
                        J2,
                        J2,
                        J2,
                        J2,
                        J2,
                        J2,
                        J2,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3,
                        __,
                        J4,
                        __,
                        __,
                        __,
                        J5,
                        J32,
                        J57,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J70,
                        __,
                        __,
                        __,
                        __,
                        J71,
                        J168,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return goto1_ctx1_x(lex),
                };
                match LUT[byte as usize] {
                    Jump::J5 => goto5_at1_ctx1_x(lex),
                    Jump::J4 => goto4_at1_ctx1_x(lex),
                    Jump::J71 => goto71_at1_ctx1_x(lex),
                    Jump::J70 => goto70_at1_ctx1_x(lex),
                    Jump::J32 => goto32_at1_ctx1_x(lex),
                    Jump::J3 => goto3_at1_ctx1_x(lex),
                    Jump::J2 => {
                        lex.bump_unchecked(1usize);
                        goto2_ctx1_x(lex)
                    }
                    Jump::J57 => goto57_at1_ctx1_x(lex),
                    Jump::J168 => goto168_at1_ctx1_x(lex),
                    Jump::__ => goto1_ctx1_x(lex),
                }
            }
            #[inline]
            fn goto5_at1<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(2usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto4_at1<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(2usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto71_at1<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(1usize) {
                    Some([188u8, 144u8..=153u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto5_at2<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto28_at2<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto4_at2<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3_at2<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto66_at2<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match byte {
                    byte if pattern0(byte) => {
                        lex.bump_unchecked(3usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto70_at1<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J5,
                    J28,
                    J4,
                    J3,
                    J66,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J28,
                        J5,
                        __,
                        __,
                        J66,
                        __,
                        J28,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J5 => goto5_at2(lex),
                    Jump::J28 => goto28_at2(lex),
                    Jump::J4 => goto4_at2(lex),
                    Jump::J3 => goto3_at2(lex),
                    Jump::J66 => goto66_at2(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto9_at2<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto32_at1<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J9,
                    J28,
                    J3,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J9,
                        __,
                        J9,
                        __,
                        J9,
                        __,
                        J9,
                        __,
                        J9,
                        __,
                        J9,
                        __,
                        J9,
                        __,
                        J9,
                        __,
                        J9,
                        __,
                        J9,
                        __,
                        J28,
                        __,
                        J28,
                        J3,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J9 => goto9_at2(lex),
                    Jump::J28 => goto28_at2(lex),
                    Jump::J3 => goto3_at2(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto3_at1<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(1usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(2usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto49_at2<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match byte {
                    byte if pattern1(byte) => {
                        lex.bump_unchecked(3usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto42_at2<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(2usize) {
                    Some([134u8..=143u8]) => {
                        lex.bump_unchecked(3usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto57_at1<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J5,
                    J28,
                    J4,
                    J49,
                    J3,
                    J42,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J5,
                        J28,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3,
                        J28,
                        __,
                        __,
                        __,
                        __,
                        J42,
                        __,
                        J28,
                        __,
                        __,
                        J49,
                        __,
                        __,
                        J28,
                        J4,
                        __,
                        __,
                        J49,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J5 => goto5_at2(lex),
                    Jump::J28 => goto28_at2(lex),
                    Jump::J4 => goto4_at2(lex),
                    Jump::J49 => goto49_at2(lex),
                    Jump::J3 => goto3_at2(lex),
                    Jump::J42 => goto42_at2(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto4_at3<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto3_at3<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([160u8..=169u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto77_at2<'s>(lex: &mut Lexer<'s>) {
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match byte {
                    180u8 => goto4_at3(lex),
                    146u8 => goto3_at3(lex),
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto5_at3<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([128u8..=137u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto28_at3<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([144u8..=153u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto9_at3<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([166u8..=175u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto89_at3<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 1usize]>(3usize) {
                    Some([182u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto140_at2<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J5,
                    J4,
                    J28,
                    J9,
                    J89,
                    J3,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J9,
                        __,
                        J4,
                        J89,
                        __,
                        __,
                        J28,
                        __,
                        __,
                        __,
                        J4,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J28,
                        __,
                        J28,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J28,
                        __,
                        J5,
                        J4,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3,
                        __,
                        J28,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J28,
                        __,
                        __,
                        __,
                        J28,
                        J3,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J28,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J5 => goto5_at3(lex),
                    Jump::J4 => goto4_at3(lex),
                    Jump::J28 => goto28_at3(lex),
                    Jump::J9 => goto9_at3(lex),
                    Jump::J89 => goto89_at3(lex),
                    Jump::J3 => goto3_at3(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto69_at2<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([175u8, 176u8..=185u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto150_at2<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J5,
                    J28,
                    J3,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3,
                        __,
                        J5,
                        __,
                        J28,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J5 => goto5_at3(lex),
                    Jump::J28 => goto28_at3(lex),
                    Jump::J3 => goto3_at3(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto153_at2<'s>(lex: &mut Lexer<'s>) {
                match lex.read_at::<&[u8; 2usize]>(2usize) {
                    Some([159u8, 142u8..=191u8]) => {
                        lex.bump_unchecked(4usize);
                        goto2_ctx1_x(lex)
                    }
                    _ => _error(lex),
                }
            }
            #[inline]
            fn goto166_at2<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J5,
                    J4,
                    J28,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J5,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J4,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J28,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(2usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J5 => goto5_at3(lex),
                    Jump::J4 => goto4_at3(lex),
                    Jump::J28 => goto28_at3(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto168_at1<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J77,
                    J140,
                    J69,
                    J150,
                    J153,
                    J166,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J77,
                        J140,
                        __,
                        __,
                        __,
                        __,
                        J150,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J153,
                        J166,
                        J69,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read_at::<u8>(1usize) {
                    Some(byte) => byte,
                    None => return _error(lex),
                };
                match LUT[byte as usize] {
                    Jump::J77 => goto77_at2(lex),
                    Jump::J140 => goto140_at2(lex),
                    Jump::J69 => goto69_at2(lex),
                    Jump::J150 => goto150_at2(lex),
                    Jump::J153 => goto153_at2(lex),
                    Jump::J166 => goto166_at2(lex),
                    Jump::__ => _error(lex),
                }
            }
            #[inline]
            fn goto169<'s>(lex: &mut Lexer<'s>) {
                enum Jump {
                    __,
                    J5,
                    J4,
                    J71,
                    J70,
                    J32,
                    J3,
                    J2,
                    J57,
                    J168,
                }
                const LUT: [Jump; 256] = {
                    use Jump::*;
                    [
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J2,
                        J2,
                        J2,
                        J2,
                        J2,
                        J2,
                        J2,
                        J2,
                        J2,
                        J2,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J3,
                        __,
                        J4,
                        __,
                        __,
                        __,
                        J5,
                        J32,
                        J57,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        J70,
                        __,
                        __,
                        __,
                        __,
                        J71,
                        J168,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                        __,
                    ]
                };
                let byte = match lex.read::<u8>() {
                    Some(byte) => byte,
                    None => return _end(lex),
                };
                match LUT[byte as usize] {
                    Jump::J5 => goto5_at1(lex),
                    Jump::J4 => goto4_at1(lex),
                    Jump::J71 => goto71_at1(lex),
                    Jump::J70 => goto70_at1(lex),
                    Jump::J32 => goto32_at1(lex),
                    Jump::J3 => goto3_at1(lex),
                    Jump::J2 => {
                        lex.bump_unchecked(1usize);
                        goto2_ctx1_x(lex)
                    }
                    Jump::J57 => goto57_at1(lex),
                    Jump::J168 => goto168_at1(lex),
                    Jump::__ => _error(lex),
                }
            }
            goto169(lex)
        }
    }
    #[automatically_derived]
    impl ::core::convert::From<DerivedLogos> for TokenType {
        fn from(token: DerivedLogos) -> Self {
            match token {
                DerivedLogos::Integer => Self::Integer,
                DerivedLogos::Operator => Self::Operator,
                DerivedLogos::Param => Self::Param,
            }
        }
    }
    #[automatically_derived]
    impl teleparse::Lexicon for TokenType {
        type Bit = u8;
        type Lexer<'s> = teleparse::lex::LogosLexerWrapper<'s, Self, DerivedLogos>;
        type Map<T: Default + Clone> = [T; 3usize];
        fn id(&self) -> usize {
            *self as usize
        }
        fn from_id(id: usize) -> Self {
            unsafe { std::mem::transmute(id) }
        }
        fn to_bit(&self) -> Self::Bit {
            (1 << self.id()) as Self::Bit
        }
        fn first() -> Self {
            Self::Integer
        }
        fn next(&self) -> ::core::option::Option<Self> {
            match self {
                Self::Param => None,
                _ => {
                    let next = self.id() + 1;
                    Some(Self::from_id(next))
                }
            }
        }
        fn should_extract(&self) -> bool {
            match self {
                _ => false,
            }
        }
        fn lexer<'s>(
            source: &'s str,
        ) -> ::core::result::Result<Self::Lexer<'s>, teleparse::GrammarError> {
            use teleparse::__priv::logos::Logos;
            Ok(teleparse::lex::LogosLexerWrapper::new(DerivedLogos::lexer(source)))
        }
    }
};
extern crate test;
#[cfg(test)]
#[rustc_test_marker = "empty"]
pub const empty: test::TestDescAndFn = test::TestDescAndFn {
    desc: test::TestDesc {
        name: test::StaticTestName("empty"),
        ignore: false,
        ignore_message: ::core::option::Option::None,
        source_file: "tests/math.rs",
        start_line: 38usize,
        start_col: 4usize,
        end_line: 38usize,
        end_col: 9usize,
        compile_fail: false,
        no_run: false,
        should_panic: test::ShouldPanic::No,
        test_type: test::TestType::IntegrationTest,
    },
    testfn: test::StaticTestFn(#[coverage(off)] || test::assert_test_result(empty())),
};
fn empty() {
    let mut lexer = TokenType::lexer("").unwrap();
    match (&lexer.next(), &(None, None)) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    let mut lexer = TokenType::lexer("   ").unwrap();
    match (&lexer.next(), &(None, None)) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
}
extern crate test;
#[cfg(test)]
#[rustc_test_marker = "single"]
pub const single: test::TestDescAndFn = test::TestDescAndFn {
    desc: test::TestDesc {
        name: test::StaticTestName("single"),
        ignore: false,
        ignore_message: ::core::option::Option::None,
        source_file: "tests/math.rs",
        start_line: 47usize,
        start_col: 4usize,
        end_line: 47usize,
        end_col: 10usize,
        compile_fail: false,
        no_run: false,
        should_panic: test::ShouldPanic::No,
        test_type: test::TestType::IntegrationTest,
    },
    testfn: test::StaticTestFn(#[coverage(off)] || test::assert_test_result(single())),
};
fn single() {
    let mut lexer = TokenType::lexer("3").unwrap();
    match (&lexer.next(), &(None, Some(Token::new((0, 1), TokenType::Integer)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    let mut lexer = TokenType::lexer("(").unwrap();
    match (&lexer.next(), &(None, Some(Token::new((0, 1), TokenType::Param)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    let mut lexer = TokenType::lexer("*").unwrap();
    match (&lexer.next(), &(None, Some(Token::new((0, 1), TokenType::Operator)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
}
extern crate test;
#[cfg(test)]
#[rustc_test_marker = "basic"]
pub const basic: test::TestDescAndFn = test::TestDescAndFn {
    desc: test::TestDesc {
        name: test::StaticTestName("basic"),
        ignore: false,
        ignore_message: ::core::option::Option::None,
        source_file: "tests/math.rs",
        start_line: 60usize,
        start_col: 4usize,
        end_line: 60usize,
        end_col: 9usize,
        compile_fail: false,
        no_run: false,
        should_panic: test::ShouldPanic::No,
        test_type: test::TestType::IntegrationTest,
    },
    testfn: test::StaticTestFn(#[coverage(off)] || test::assert_test_result(basic())),
};
fn basic() {
    let source = "3+4*(5-6)/7";
    let mut lexer = TokenType::lexer(source).unwrap();
    match (&lexer.next(), &(None, Some(Token::new((0, 1), TokenType::Integer)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, Some(Token::new((1, 2), TokenType::Operator)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, Some(Token::new((2, 3), TokenType::Integer)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, Some(Token::new((3, 4), TokenType::Operator)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, Some(Token::new((4, 5), TokenType::Param)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, Some(Token::new((5, 6), TokenType::Integer)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, Some(Token::new((6, 7), TokenType::Operator)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, Some(Token::new((7, 8), TokenType::Integer)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, Some(Token::new((8, 9), TokenType::Param)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, Some(Token::new((9, 10), TokenType::Operator)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, Some(Token::new((10, 11), TokenType::Integer)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, None)) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
}
extern crate test;
#[cfg(test)]
#[rustc_test_marker = "with_ignore"]
pub const with_ignore: test::TestDescAndFn = test::TestDescAndFn {
    desc: test::TestDesc {
        name: test::StaticTestName("with_ignore"),
        ignore: false,
        ignore_message: ::core::option::Option::None,
        source_file: "tests/math.rs",
        start_line: 78usize,
        start_col: 4usize,
        end_line: 78usize,
        end_col: 15usize,
        compile_fail: false,
        no_run: false,
        should_panic: test::ShouldPanic::No,
        test_type: test::TestType::IntegrationTest,
    },
    testfn: test::StaticTestFn(
        #[coverage(off)]
        || test::assert_test_result(with_ignore()),
    ),
};
fn with_ignore() {
    let source = "3 + 4  *( 5 -6";
    let mut lexer = TokenType::lexer(source).unwrap();
    match (&lexer.next(), &(None, Some(Token::new((0, 1), TokenType::Integer)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, Some(Token::new((2, 3), TokenType::Operator)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, Some(Token::new((4, 5), TokenType::Integer)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, Some(Token::new((7, 8), TokenType::Operator)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, Some(Token::new((8, 9), TokenType::Param)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, Some(Token::new((10, 11), TokenType::Integer)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, Some(Token::new((12, 13), TokenType::Operator)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, Some(Token::new((13, 14), TokenType::Integer)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, None)) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
}
extern crate test;
#[cfg(test)]
#[rustc_test_marker = "invalid"]
pub const invalid: test::TestDescAndFn = test::TestDescAndFn {
    desc: test::TestDesc {
        name: test::StaticTestName("invalid"),
        ignore: false,
        ignore_message: ::core::option::Option::None,
        source_file: "tests/math.rs",
        start_line: 94usize,
        start_col: 4usize,
        end_line: 94usize,
        end_col: 11usize,
        compile_fail: false,
        no_run: false,
        should_panic: test::ShouldPanic::No,
        test_type: test::TestType::IntegrationTest,
    },
    testfn: test::StaticTestFn(#[coverage(off)] || test::assert_test_result(invalid())),
};
fn invalid() {
    let source = "3+ 4 what is (this 5)   invalid";
    let mut lexer = TokenType::lexer(source).unwrap();
    match (&lexer.next(), &(None, Some(Token::new((0, 1), TokenType::Integer)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, Some(Token::new((1, 2), TokenType::Operator)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, Some(Token::new((3, 4), TokenType::Integer)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (
        &lexer.next(),
        &(Some((5, 12).into()), Some(Token::new((13, 14), TokenType::Param))),
    ) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (
        &lexer.next(),
        &(Some((14, 18).into()), Some(Token::new((19, 20), TokenType::Integer))),
    ) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(None, Some(Token::new((20, 21), TokenType::Param)))) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
    match (&lexer.next(), &(Some((24, 31).into()), None)) {
        (left_val, right_val) => {
            if !(*left_val == *right_val) {
                let kind = ::core::panicking::AssertKind::Eq;
                ::core::panicking::assert_failed(
                    kind,
                    &*left_val,
                    &*right_val,
                    ::core::option::Option::None,
                );
            }
        }
    };
}
#[rustc_main]
#[coverage(off)]
pub fn main() -> () {
    extern crate test;
    test::test_main_static(&[&basic, &empty, &invalid, &single, &with_ignore])
}
